{
  var lang = window.superDuperSecretWindowScopeThatNoOneShouldKnowAbout.lang
}

start
  = w program w

program
  = m:method* w { return new lang.Program(m)}

method
  = "method" w i:ident w "(" w a:methodArgs w ")" w "{" w s:statements w "}" w { return new lang.Method(i, a, s)}

methodArgs
  = list:methodArgListElement* w single:ident { return [].concat(list).concat(single).filter(function(s) { return s })}
  / "" { return []}

methodArgListElement
  = w i:ident w "," w { return i }

statements
  = s:statement* { return new lang.Statements(s)}

statement
  = assignmentStatement
  / whileStatement
  / methodCallStatement
  / returnStatement

assignmentStatement
  = "let" w i:ident w ":=" w e:expression w { return new lang.AssignmentStatement(i, e); }

whileStatement
  = "while" w "(" w c:expression w ")" w "do" w "{" w s:statements w "}" w { return new lang.WhileStatement(c, s); }

methodCallStatement
  = "call" w i:ident w "(" w a:methodCallArgs w ")" w { return new lang.MethodCallStatement(i, a)}

methodCallArgs
  = list:methodCallArgListElement* w single:expression { return [].concat(list).concat(single).filter(function(s) { return s })}
  / "" { return []}

methodCallArgListElement
  = w e:expression w "," w { return e }

returnStatement
  = "return" w e:expression w { return new lang.ReturnStatement(e) }
  / "return" w { return new lang.ReturnStatement() }

expression
  = additive
  / multiplicative

additive
  = left:multiplicative w "+" w right:additive { return new lang.BinaryExpression(left, right, "+"); }
  / left:multiplicative w "-" w right:additive { return new lang.BinaryExpression(left, right, "-"); }
  / multiplicative

multiplicative
  = left:primary w "*" w right:multiplicative { return new lang.BinaryExpression(left, right, "*"); }
  / left:primary w "/" w right:multiplicative { return new lang.BinaryExpression(left, right, "/"); }
  / primary

value
  = i:ident { return new lang.ValueExpression(i); }

primary
  = value
  / integer
  / "(" w additive:additive w ")" { return additive; }

integer "integer"
  = digits:[0-9]+ { return new lang.Integer(parseInt(digits.join(""), 10)); }

ident
  = name:[a-z]+ { return new lang.ConcreteIdent(name.join("")) }

w
  = [ \t\n\r]*
